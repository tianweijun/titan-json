
// grammar JSON ;

@StartGrammar json ;

@NonterminalGrammar begin ;
json
   : value
   ;

obj
   : '{' pair (',' pair)* '}'
   | '{' '}'
   ;

pair
   : STRING ':' value
   ;

arr
   : '[' value ( ',' value)* ']'
   | '[' ']'
   ;

value
   : STRING
   | NUMBER
   | obj
   | arr
   | 'true'
   | 'false'
   | 'null'
   ;
@NonterminalGrammar end ;

@TerminalGrammar begin ;
LeftBrace : '{' ;
RightBrace : '}' ;
Comma : ',' ;
Colon : ':' ;
LeftBracket : '[' ;
RightBracket : ']' ;

True : 'true' ;
False : 'false' ;
Null : 'null' ;

NUMBER
   : '-'? INT ('.' [0-9]+ )? EXP?
   ;

STRING
   : '"' (ESC | STRING_OTHER_CHAR)* '"'
   ;

 WS
    : [\s\t\n\r]+ -> skip
    ;
@TerminalGrammar end ;

@TerminalFragmentGrammar begin ;
ESC
   : '\\' (["\\/bfnrt] | HEXCHAR)
   ;

HEXCHAR
   : [xX] HEX HEX?
   ;

HEX
   : [0-9a-fA-F]
   ;

STRING_OTHER_CHAR
   : ~["\\]
   ;

INT
   : '0' | [1-9] [0-9]*
   ;

// no leading zeros

EXP
   : [Ee] [+\-]? INT
   ;
@TerminalFragmentGrammar end ;